version: 2.1

executors:
  linux:
    docker:
      - image: ethereum/cpp-build-env:11

defaults:

  environment-info: &environment-info
    run:
      name: "Environment info"
      command: |
        echo CXX: $CXX
        $CXX --version
        $CXX --version > compiler.version

  update-submodules: &update-submodules
    run:
      name: "Update git submodules"
      command: |
        git submodule update --init --recursive

  install-m32: &install-m32
    run:
      name: "Install 32-bit toolchain"
      command: |
        sudo apt -q update
        sudo apt -qy install g++-multilib

  install-mips64: &install-mips64
    run:
      name: "Install mips64 toolchain"
      command: |
        sudo apt -q update
        sudo apt -qy install g++-mips64-linux-gnuabi64 qemu-user-static

  install-powerpc64: &install-powerpc64
    run:
      name: "Install powerpc64 toolchain"
      command: |
        sudo apt -q update
        sudo apt -qy install g++-powerpc64-linux-gnu qemu-user-static

  configure: &configure
    run:
      name: "Configure"
      # Build "out-of-source" to have better coverage report
      # (ninja is using relative paths otherwise).
      working_directory: ~/build
      command: |
        cmake ../project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=/tmp/local $CMAKE_OPTIONS

  build: &build
    run:
      name: "Build"
      working_directory: ~/build
      command: |
        cmake --build . -- -j $BUILD_PARALLEL_JOBS
        cmake --build . --target install

  build-tests: &build-tests
    run:
      name: "Build ethash-test"
      working_directory: ~/build
      command: |
        cmake --build . --target ethash-test -- -j $BUILD_PARALLEL_JOBS

  test: &test
    run:
      name: "Test"
      working_directory: ~/build
      command: |
        if [ -z "$GTEST_FILTER" ]; then
          test/ethash-test
        else
          test/ethash-test --gtest_filter=$GTEST_FILTER
        fi

  test-cmake-config: &test-cmake-config
    run:
      name: "Test CMake config"
      working_directory: ~/project/test/integration/cmake-config
      command: |
        cmake -DCMAKE_PREFIX_PATH=/tmp/local .
        cmake --build .
        ./ethash-cmake-config-test

  test-mips64: &test-mips64
    run:
      name: "Test (mips64)"
      working_directory: ~/build
      command: |
        qemu-mips64 -L /usr/mips64-linux-gnuabi64 test/ethash-test

  benchmark: &benchmark
    run:
      name: "Benchmark"
      working_directory: ~/build
      command: |
        test/ethash-bench

  upload-coverage-data: &upload-coverage-data
    run:
      name: "Upload coverage data"
      command: |
        codecov --required --gcov-exec "$GCOV" --gcov-root ~/build


  macos-defaults: &macos-defaults
    environment:
      - BUILD_PARALLEL_JOBS: 2
    steps:
      - run:
          name: "Install CMake"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake ninja
      - run:
          name: "Install Python3"
          # Python3 and requests are needed for Hunter upload.
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            if ! brew install python3; then
              brew upgrade python
            fi
            pip3 install -q requests gitpython
      - checkout
      - *configure
      - *build
      - *test


jobs:

  linux-gcc-coverage:
    environment:
      - CXX: g++-8
      - CC:  gcc-8
      - GCOV: gcov-8
      - BUILD_PARALLEL_JOBS: 2
      - BUILD_TYPE: Debug
      - CMAKE_OPTIONS: -DCOVERAGE=ON
    executor: linux
    steps:
      - checkout
      - *configure
      - *build
      - *test
      - *upload-coverage-data

  linux-clang-ubsan:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - BUILD_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DSANITIZE=undefined,integer,nullability
      - UBSAN_OPTIONS: halt_on_error=1
    executor: linux
    steps:
      - checkout
      - *configure
      - *build
      - *test
      - *benchmark

  linux-clang-asan:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - BUILD_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DSANITIZE=address
      - ASAN_OPTIONS: allocator_may_return_null=1
    executor: linux
    steps:
      - checkout
      - *configure
      - *build
      - *test
      - *benchmark

  linux-32bit-asan:
    environment:
      - BUILD_PARALLEL_JOBS: 2
      - BUILD_TYPE: RelWithDebInfo
      - CMAKE_OPTIONS: -DTOOLCHAIN=cxx11-32bit -DSANITIZE=address
      - GTEST_FILTER: -*_oom
      - ASAN_OPTIONS: allocator_may_return_null=1
    docker:
      - image: ethereum/cpp-build-env:12-gcc-9
    steps:
      - checkout
      - *install-m32
      - *configure
      - *build
      - *test

  mips64:
    environment:
      - BUILD_PARALLEL_JOBS: 2
      - TEST_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DTOOLCHAIN=mips64 -DCMAKE_EXE_LINKER_FLAGS=-static
    docker:
      - image: ethereum/cpp-build-env:12-gcc-9
    steps:
      - checkout
      - *install-mips64
      - *configure
      - *build-tests
      - store_artifacts:
          path: ~/build/test/ethash-test
          destination: ethash-test
      - run:
          name: "Test mips64"
          working_directory: ~/build
          command: |  # Software emulation in qemu will not handle threads.
            qemu-mips64-static test/ethash-test --gtest_filter='-*_multithreaded.*'

  powerpc64:
    environment:
      - BUILD_PARALLEL_JOBS: 2
      - TEST_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DTOOLCHAIN=powerpc64 -DCMAKE_EXE_LINKER_FLAGS=-static
    executor: linux
    steps:
      - checkout
      - *install-powerpc64
      - *configure
      - *build-tests
      - store_artifacts:
          path: ~/build/test/ethash-test
          destination: ethash-test
      - run:
          name: "Test powerpc64"
          working_directory: ~/build
          command: |  # Software emulation in qemu will not handle threads.
            qemu-ppc64-static test/ethash-test --gtest_filter='-*_multithreaded.*'

  linux-release:
    environment:
      - CXX: clang++-8
      - CC:  clang-8
      - BUILD_PARALLEL_JOBS: 4
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DHUNTER_ENABLED=OFF
    docker:
      - image: ethereum/cpp-build-env:9
    steps:
      - checkout
      - *configure
      - *build
      - persist_to_workspace:
          root: /tmp/local
          paths:
            - "*"

  linux-release-python:
    docker:
      - image: quay.io/pypa/manylinux1_x86_64
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/dist
      - run:
          name: "Build wheels"
          command: sh scripts/ci/python_build_wheels.sh
      - run:
          name: "Tag wheels"
          working_directory: ~/project/dist
          command: |
            find -name '*linux_x86_64.whl' -exec auditwheel repair {} \;
      - store_artifacts:
          path: ~/project/dist
          destination: dist
      - run:
          name: "Install CMake"
          command: |
            export PATH=/opt/python/cp37-cp37m/bin:$PATH
            pip install cmake
      - run:
          name: "Build source dist"
          command: |
            export PATH=/opt/python/cp37-cp37m/bin:$PATH
            ./setup.py sdist
      - run:
          name: "Build wheel with CMake build"
          command: |
            export PATH=/opt/python/cp37-cp37m/bin:$PATH
            ./setup.py bdist_wheel
      - run:
          name: "Test"
          command: |
            export PATH=/opt/python/cp37-cp37m/bin:$PATH
            ./setup.py test

  macos-xcode-tsan:
    <<: *macos-defaults
    environment:
      - BUILD_PARALLEL_JOBS: 2
      - CMAKE_OPTIONS: -DSANITIZE=thread
      - TSAN_OPTIONS: allocator_may_return_null=1
    macos:
      xcode: "11.3.1"

  macos-xcode-old:
    <<: *macos-defaults
    macos:
      xcode: "9.4.1"

  macos-release:
    environment:
      - BUILD_PARALLEL_JOBS: 4
      - CMAKE_OPTIONS: -DETHASH_BUILD_TESTS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_INSTALL_PREFIX=~/project/dist
    macos:
      xcode: "11.3.1"
    steps:
      - run:
          name: "Install CMake"
          command: |
            which python3
            ls -l /usr/local/lib
            ls -l /usr/local/bin
            pip3 install -q cmake
      - checkout
      - *configure
      - *build
      - run:
          name: "Test"
          command: |
            ./setup.py test
      - run:
          name: "Build wheels"
          command: sh scripts/ci/python_build_wheels.sh
      - store_artifacts:
          path: ~/project/dist
          destination: dist


workflows:
  version: 2
  ethash:
    jobs:
      - linux-gcc-coverage
      - linux-clang-ubsan
      - linux-clang-asan
      - linux-32bit-asan
      - mips64
      - powerpc64
      - macos-xcode-tsan
      - macos-xcode-old
      - linux-release
      - linux-release-python:
          requires:
            - linux-release
      - macos-release
